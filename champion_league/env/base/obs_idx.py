import enum
from enum import IntEnum, auto


class _ObsIdxGenerativeAuto(IntEnum):
    def _generate_next_value_(self, start, count, last_values):
        return count


class ObsIdx(_ObsIdxGenerativeAuto):
    type1 = auto()
    type2 = auto()
    ability_bit0 = auto()
    ability_bit1 = auto()
    ability_bit2 = auto()
    ability_bit3 = auto()
    ability_bit4 = auto()
    ability_bit5 = auto()
    ability_bit6 = auto()
    ability_bit7 = auto()
    ability_bit8 = auto()
    current_hp = auto()
    hp_ratio = auto()
    base_hp = auto()
    base_atk = auto()
    base_def = auto()
    base_spa = auto()
    base_spd = auto()
    base_spe = auto()
    boost_acc = auto()
    boost_eva = auto()
    boost_atk = auto()
    boost_def = auto()
    boost_spa = auto()
    boost_spd = auto()
    boost_spe = auto()
    status = auto()
    move_1_accuracy = auto()
    move_1_base_power = auto()
    move_1_category = auto()
    move_1_current_pp = auto()
    move_1_secondary_chance = auto()
    move_1_secondary_status = auto()
    move_1_type = auto()
    move_2_accuracy = auto()
    move_2_base_power = auto()
    move_2_category = auto()
    move_2_current_pp = auto()
    move_2_secondary_chance = auto()
    move_2_secondary_status = auto()
    move_2_type = auto()
    move_3_accuracy = auto()
    move_3_base_power = auto()
    move_3_category = auto()
    move_3_current_pp = auto()
    move_3_secondary_chance = auto()
    move_3_secondary_status = auto()
    move_3_type = auto()
    move_4_accuracy = auto()
    move_4_base_power = auto()
    move_4_category = auto()
    move_4_current_pp = auto()
    move_4_secondary_chance = auto()
    move_4_secondary_status = auto()
    move_4_type = auto()
